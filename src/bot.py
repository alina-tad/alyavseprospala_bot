import asyncio
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from .config import Config
from .llm import LLMClient
from .data_manager import DataManager
from .metrics import MetricsManager
from .logging_utils import JSONEventLogger, setup_structured_file_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ @conventions.mdc
logging.basicConfig(
    level=Config.get_log_level(),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DreamsBot:
    """Telegram –±–æ—Ç –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–∏—è —Å–Ω–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.bot = Bot(token=Config.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.llm_client = LLMClient()
        self.data_manager = DataManager()
        self.metrics = MetricsManager()
        self.events = JSONEventLogger()
        self.system_prompt = self.llm_client.create_system_prompt()
        self.setup_handlers()
        # —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª-–ª–æ–≥
        setup_structured_file_logging()
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å LLM –∏ DataManager")
    
    def setup_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.dp.message(Command("start"))
        async def handle_start_command(message: types.Message) -> None:
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
            welcome_text = (
                "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–≤–æ–∏—Ö —Å–Ω–∞—Ö. üåü\n\n"
                "–û–ø–∏—à–∏ —Å–≤–æ–π —Å–æ–Ω ‚Äî –≤–º–µ—Å—Ç–µ –º—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—é–∂–µ—Ç, —Å–∏–º–≤–æ–ª—ã –∏ —ç–º–æ—Ü–∏–∏, "
                "—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≥–ª—É–±–∏–Ω–Ω—ã–µ —Å–º—ã—Å–ª—ã.\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/stop  ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É\n\n"
                "–ì–æ—Ç–æ–≤(–∞) –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º —Å–Ω–æ–º?"
            )
            await message.answer(welcome_text)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            self.events.log_event("start", {"user_id": message.from_user.id})
        
        @self.dp.message(Command("stop"))
        async def handle_stop_command(message: types.Message) -> None:
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop"""
            await message.answer("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Å–Ω–∞—Ö üëã")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ—Ç–∞")
            self.events.log_event("stop", {"user_id": message.from_user.id})
        
        @self.dp.message(Command("clear"))
        async def handle_clear_command(message: types.Message) -> None:
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clear (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
            user_id = message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not Config.is_admin(user_id):
                # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /clear –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                self.events.log_event("clear_denied", {"user_id": user_id})
                return
            
            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            user_id_str = str(user_id)
            self.data_manager.clear_user_history(user_id_str)
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. ‚ú®")
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –æ—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é")
            self.events.log_event("clear_ok", {"user_id": user_id})
        
        @self.dp.message(Command("export"))
        async def handle_export_command(message: types.Message) -> None:
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /export"""
            user_id = message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not Config.is_admin(user_id):
                # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /export –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                self.events.log_event("export_denied", {"user_id": user_id})
                return
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.data_manager.get_statistics()
                stats_text = (
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
                    f"üí¨ –°–µ—Å—Å–∏–π: {stats['total_sessions']}\n"
                    f"üìù –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}"
                )
                
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                export_data = self.data_manager.export_all_history()
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                filename = f"export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(export_data)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(filename, 'rb') as f:
                    await message.answer_document(
                        types.BufferedInputFile(f.read(), filename=filename),
                        caption=stats_text
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(filename)
                logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ")
                self.events.log_event("export_ok", {"user_id": user_id, "filename": filename})
                
            except Exception as e:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
                logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id}: {e}")
        
        @self.dp.message()
        async def handle_message(message: types.Message) -> None:
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å LLM"""
            user_message = message.text
            user_id = str(message.from_user.id)
            username = message.from_user.username or message.from_user.first_name or "Unknown"
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
            if user_message.strip().startswith('/'):
                return
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            log_message = user_message[:50] + "..." if len(user_message) > 50 else user_message
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª: {log_message}")
            # jsonl —Å–æ–±—ã—Ç–∏–µ
            self.events.log_event("message_in", {"user_id": user_id, "text": log_message})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞
            if len(user_message.strip()) < 15:
                await message.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ–π —Å–æ–Ω –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –≤–∏–¥–µ–ª, –∫–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ –∏—Å–ø—ã—Ç—ã–≤–∞–ª, "
                    "–∫–∞–∫–∏–µ –æ–±—Ä–∞–∑—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å. –ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —Ç–µ–º –≥–ª—É–±–∂–µ –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑. üåô"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.data_manager.add_message(user_id, username, "user", user_message)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM
            messages = [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Å–æ–Ω: {user_message}"}
            ]
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback)
            try:
                start_ts = datetime.now()
                response_text, response_meta = await self.llm_client.generate_with_fallback(messages)
                await message.answer(response_text)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
                self.data_manager.add_message(user_id, username, "assistant", response_text, metadata=response_meta)
                
                model_used = response_meta.get("model")
                is_fallback = response_meta.get("fallback")
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –ú–æ–¥–µ–ª—å: {model_used}, fallback: {is_fallback}")
                self.events.log_event("message_out", {"user_id": user_id, "model": model_used, "fallback": bool(is_fallback)})
                # –º–µ—Ç—Ä–∏–∫–∏
                duration_ms = int((datetime.now() - start_ts).total_seconds() * 1000)
                self.metrics.record_request(
                    model=model_used,
                    used_fallback=bool(is_fallback),
                    success=True,
                    response_time_ms=duration_ms,
                    primary_attempt=not bool(is_fallback),
                )
            except Exception as e:
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
                if "rate limit" in str(e).lower():
                    error_message = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                elif "api" in str(e).lower():
                    error_message = "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                else:
                    error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
                await message.answer(error_message)
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                self.events.log_event("error", {"user_id": user_id, "error": str(e)})

        @self.dp.message(Command("stats"))
        async def handle_stats_command(message: types.Message) -> None:
            """–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
            user_id = message.from_user.id
            if not Config.is_admin(user_id):
                # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                self.events.log_event("stats_denied", {"user_id": user_id})
                return
            stats = self.data_manager.get_statistics()
            # –°–∂–∞—Ç–æ: –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ + –ø–æ—Å–ª–µ–¥–Ω–∏–µ LLM-–º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
            from .metrics import MetricsManager
            mm = MetricsManager()
            m = mm.metrics
            avg_ms = 0
            if m["timings"]["response_ms_count"]:
                avg_ms = int(m["timings"]["response_ms_sum"] / m["timings"]["response_ms_count"])  # noqa: E501
            text = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['total_users']}\n"
                f"üí¨ –°–µ—Å—Å–∏–∏: {stats['total_sessions']}\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏—è: {stats['total_messages']}\n"
                f"‚öôÔ∏è –ó–∞–ø—Ä–æ—Å—ã LLM: {m['totals']['requests']}, –æ—à–∏–±–∫–∏: {m['totals']['errors']}\n"
                f"üß† Primary success: {m['llm']['primary_success']}, Fallback success: {m['llm']['fallback_success']}\n"  # noqa: E501
                f"‚è±Ô∏è –°—Ä. –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_ms} –º—Å\n"
            )
            await message.answer(text)
            self.events.log_event("stats_ok", {"user_id": user_id})
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise 